{"version":3,"sources":["main.coffee"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'coffeenode-chr'\nlog                       = CND.get_logger 'plain',   badge\ninfo                      = CND.get_logger 'info',    badge\nalert                     = CND.get_logger 'alert',   badge\ndebug                     = CND.get_logger 'debug',   badge\nwarn                      = CND.get_logger 'warn',    badge\nurge                      = CND.get_logger 'urge',    badge\nwhisper                   = CND.get_logger 'whisper', badge\nhelp                      = CND.get_logger 'help',    badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ncharacter_sets_and_ranges = require './character-sets-and-ranges'\n@_names_and_ranges_by_csg = character_sets_and_ranges[ 'names-and-ranges-by-csg' ]\n@_ranges_by_rsg           = character_sets_and_ranges[ 'ranges-by-rsg' ]\nbinary_interval_search    = require './binary-interval-search'\n\n\n\n#===========================================================================================================\n# SPLIT TEXT INTO CHARACTERS\n#-----------------------------------------------------------------------------------------------------------\n@chrs_from_text = ( text, options ) ->\n  return [] if text.length is 0\n  #.........................................................................................................\n  switch input_mode = options?[ 'input' ] ? 'plain'\n    when 'plain'  then splitter = @_plain_splitter\n    when 'ncr'    then splitter = @_ncr_splitter\n    when 'xncr'   then splitter = @_xncr_splitter\n    else throw new Error \"unknown input mode: #{rpr input_mode}\"\n  #.........................................................................................................\n  return ( text.split splitter ).filter ( element, idx ) -> return element.length isnt 0\n\n#-----------------------------------------------------------------------------------------------------------\n@_new_chunk = ( csg, rsg, chrs ) ->\n  R =\n    '~isa':     'CHR/chunk'\n    'csg':      csg\n    'rsg':      rsg\n    # 'chrs':     chrs\n    'text':     chrs.join ''\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@chunks_from_text = ( text, options ) ->\n  ### Given a `text` and `options` (of which `csg` is irrelevant here), return a list of `CHR/chunk`\n  objects (as returned by `CHR._new_chunk`) that describes stretches of characters with codepoints in the\n  same 'range' (Unicode block).\n  ###\n  R           = []\n  return R if text.length is 0\n  last_csg    = 'u'\n  last_rsg    = null\n  chrs        = []\n  #.........................................................................................................\n  switch output_mode = options?[ 'output' ] ? 'plain'\n    when 'plain'\n      transform_output = ( chr ) ->\n        return chr\n    when 'html'\n      transform_output = ( chr ) ->\n        return switch chr\n          when '&' then '&amp;'\n          when '<' then '&lt;'\n          when '>' then '&gt;'\n          else chr\n    else\n      throw new Error \"unknown output mode: #{rpr output_mode}\"\n  #.........................................................................................................\n  for chr in @chrs_from_text text, options\n    description = @analyze chr, options\n    { csg\n      rsg }     = description\n    chr         = description[ if csg is 'u' then 'chr' else 'ncr' ]\n    if rsg isnt last_rsg\n      R.push @_new_chunk last_csg, last_rsg, chrs if chrs.length > 0\n      last_csg    = csg\n      last_rsg    = rsg\n      chrs        = []\n    #.......................................................................................................\n    chrs.push transform_output chr\n  #.........................................................................................................\n  R.push @_new_chunk last_csg, last_rsg, chrs if chrs.length > 0\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@html_from_text = ( text, options ) ->\n  R = []\n  #.........................................................................................................\n  input_mode  = options?[ 'input' ] ? 'plain'\n  chunks      = @chunks_from_text text, input: input_mode, output: 'html'\n  for chunk in chunks\n    R.push \"\"\"<span class=\"#{chunk[ 'rsg' ]}\">#{chunk[ 'text' ]}</span>\"\"\"\n  #.........................................................................................................\n  return R.join ''\n\n#===========================================================================================================\n# CONVERTING TO CID\n#-----------------------------------------------------------------------------------------------------------\n@cid_from_chr = ( chr, options ) ->\n  input_mode = options?[ 'input' ] ? 'plain'\n  return ( @_chr_csg_cid_from_chr chr, input_mode )[ 2 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@csg_cid_from_chr = ( chr, options ) ->\n  input_mode = options?[ 'input' ] ? 'plain'\n  return ( @_chr_csg_cid_from_chr chr, input_mode )[ 1 .. ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_chr_csg_cid_from_chr = ( chr, input_mode ) ->\n  ### Given a text with one or more characters, return the first character, its CSG, and its CID (as a\n  non-negative integer). Additionally, an input mode may be given as either `plain`, `ncr`, or `xncr`.\n  ###\n  #.........................................................................................................\n  throw new Error \"unable to obtain CID from empty string\" if chr.length is 0\n  #.........................................................................................................\n  input_mode ?= 'plain'\n  switch input_mode\n    when 'plain'  then matcher = @_first_chr_matcher_plain\n    when 'ncr'    then matcher = @_first_chr_matcher_ncr\n    when 'xncr'   then matcher = @_first_chr_matcher_xncr\n    else throw new Error \"unknown input mode: #{rpr input_mode}\"\n  #.........................................................................................................\n  match     = chr.match matcher\n  throw new Error \"illegal character sequence in #{rpr chr}\" unless match?\n  first_chr = match[ 0 ]\n  #.........................................................................................................\n  switch first_chr.length\n    #.......................................................................................................\n    when 1\n      return [ first_chr, 'u', first_chr.charCodeAt 0 ]\n    #.......................................................................................................\n    when 2\n      ### thx to http://perldoc.perl.org/Encode/Unicode.html ###\n      hi  = first_chr.charCodeAt 0\n      lo  = first_chr.charCodeAt 1\n      cid = ( hi - 0xD800 ) * 0x400 + ( lo - 0xDC00 ) + 0x10000\n      return [ first_chr, 'u', cid ]\n    #.......................................................................................................\n    else\n      [ chr\n        csg\n        cid_hex\n        cid_dec ] = match\n      cid = if cid_hex? then parseInt cid_hex, 16 else parseInt cid_dec, 10\n      csg = 'u' if csg.length is 0\n      return [ first_chr, csg, cid ]\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @cid_from_ncr = ( ) ->\n\n# #-----------------------------------------------------------------------------------------------------------\n# @cid_from_xncr = ( ) ->\n\n# #-----------------------------------------------------------------------------------------------------------\n# @cid_from_fncr = ( ) ->\n\n\n#===========================================================================================================\n# CONVERTING FROM CID &c\n#-----------------------------------------------------------------------------------------------------------\n@as_csg         = ( cid_hint, O ) -> return ( @_csg_cid_from_hint cid_hint, O )[ 0 ]\n@as_cid         = ( cid_hint, O ) -> return ( @_csg_cid_from_hint cid_hint, O )[ 1 ]\n#...........................................................................................................\n@as_chr         = ( cid_hint, O ) -> return @_as_chr.apply        @, @_csg_cid_from_hint cid_hint, O\n@as_uchr        = ( cid_hint, O ) -> return @_as_uchr.apply       @, @_csg_cid_from_hint cid_hint, O\n@as_fncr        = ( cid_hint, O ) -> return @_as_fncr.apply       @, @_csg_cid_from_hint cid_hint, O\n@as_sfncr       = ( cid_hint, O ) -> return @_as_sfncr.apply      @, @_csg_cid_from_hint cid_hint, O\n@as_xncr        = ( cid_hint, O ) -> return @_as_xncr.apply       @, @_csg_cid_from_hint cid_hint, O\n@as_ncr         = ( cid_hint, O ) -> return @_as_xncr.apply       @, @_csg_cid_from_hint cid_hint, O\n@as_rsg         = ( cid_hint, O ) -> return @_as_rsg.apply        @, @_csg_cid_from_hint cid_hint, O\n@as_range_name  = ( cid_hint, O ) -> return @_as_range_name.apply @, @_csg_cid_from_hint cid_hint, O\n#...........................................................................................................\n@analyze        = ( cid_hint, O ) -> return @_analyze.apply       @, @_csg_cid_from_hint cid_hint, O\n\n#-----------------------------------------------------------------------------------------------------------\n@_analyze = ( csg, cid ) ->\n  if csg is 'u'\n    chr         = @_unicode_chr_from_cid cid\n    ncr = xncr  = @_as_xncr csg, cid\n  else\n    chr         = @_as_xncr csg, cid\n    xncr        = @_as_xncr csg, cid\n    ncr         = @_as_xncr 'u', cid\n  #.........................................................................................................\n  R =\n    '~isa':     'CHR/info'\n    'chr':      chr\n    'uchr':     @_unicode_chr_from_cid cid\n    'csg':      csg\n    'cid':      cid\n    'fncr':     @_as_fncr  csg, cid\n    'sfncr':    @_as_sfncr csg, cid\n    'ncr':      ncr\n    'xncr':     xncr\n    'rsg':      @_as_rsg   csg, cid\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_as_chr = ( csg, cid ) ->\n  return @_unicode_chr_from_cid cid if csg is 'u'\n  return ( @_analyze csg, cid )[ 'chr' ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_as_uchr = ( csg, cid ) ->\n  return @_unicode_chr_from_cid cid\n\n#-----------------------------------------------------------------------------------------------------------\n@_unicode_chr_from_cid = ( cid ) ->\n  return String.fromCharCode cid if cid <= 0xffff\n  ### thx to http://perldoc.perl.org/Encode/Unicode.html ###\n  hi = ( Math.floor ( cid - 0x10000 ) / 0x400 ) + 0xD800\n  lo =              ( cid - 0x10000 ) % 0x400   + 0xDC00\n  return ( String.fromCharCode hi ) + ( String.fromCharCode lo )\n\n#-----------------------------------------------------------------------------------------------------------\n@_as_fncr = ( csg, cid ) ->\n  rsg = ( @_as_rsg csg, cid ) ? csg\n  return \"#{rsg}-#{cid.toString 16}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_as_sfncr = ( csg, cid ) ->\n  return \"#{csg}-#{cid.toString 16}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_as_xncr = ( csg, cid ) ->\n  csg = '' if csg is 'u' or not csg?\n  return \"&#{csg}#x#{cid.toString 16};\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_as_rsg = ( csg, cid ) ->\n  return binary_interval_search @_names_and_ranges_by_csg[ csg ], 'first-cid', 'last-cid', 'rsg', cid\n\n#-----------------------------------------------------------------------------------------------------------\n@_as_range_name = ( csg, cid ) ->\n  return binary_interval_search @_names_and_ranges_by_csg[ csg ], 'first-cid', 'last-cid', 'range-name', cid\n\n\n#===========================================================================================================\n# ANALYZE ARGUMENTS\n#-----------------------------------------------------------------------------------------------------------\n@_csg_cid_from_hint = ( cid_hint, options ) ->\n  ### This helper is used to derive the correct CSG and CID from arguments as accepted by the `as_*` family\n  of methods, such as `CHR.as_fncr`, `CHR.as_rsg` and so on; its output may be directly applied to the\n  respective namesake private method (`CHR._as_fncr`, `CHR._as_rsg` and so on). The method arguments should\n  obey the following rules:\n\n  * Methods may be called with one or two arguments; the first is known as the 'CID hint', the second as\n    'options'.\n\n  * The CID hint may be a number or a text; if it is a number, it is understood as a CID; if it\n    is a text, its interpretation is subject to the `options[ 'input' ]` setting.\n\n  * Options must be a POD with the optional members `input` and `csg`.\n\n  * `options[ 'input' ]` is *only* observed if the CID hint is a text; it governs which kinds of character\n    references are recognized in the text. `input` may be one of `plain`, `ncr`, or `xncr`; it defaults to\n    `plain` (no character references will be recognized).\n\n  * `options[ 'csg' ]` sets the character set sigil. If `csg` is set in the options, then it will override\n    whatever the outcome of `CHR.csg_cid_from_chr` w.r.t. CSG is—in other words, if you call\n    `CHR.as_sfncr '&jzr#xe100', input: 'xncr', csg: 'u'`, you will get `u-e100`, with the numerically\n    equivalent codepoint from the `u` (Unicode) character set.\n\n  * Before CSG and CID are returned, they will be validated for plausibility.\n\n  ###\n  #.........................................................................................................\n  switch type = CND.type_of options\n    when 'null', 'jsundefined'\n      csg_of_options  = null\n      input_mode      = null\n    when 'pod'\n      csg_of_options  = options[ 'csg' ]\n      input_mode      = options[ 'input' ]\n    else\n      throw new Error \"expected a POD as second argument, got a #{type}\"\n  #.........................................................................................................\n  switch type = CND.type_of cid_hint\n    when 'number'\n      csg_of_cid_hint = null\n      cid             = cid_hint\n    when 'text'\n      [ csg_of_cid_hint\n        cid             ] = @csg_cid_from_chr cid_hint, input: input_mode\n    else\n      throw new Error \"expected a text or a number as first argument, got a #{type}\"\n  #.........................................................................................................\n  if csg_of_options?\n    csg = csg_of_options\n  else if csg_of_cid_hint?\n    csg = csg_of_cid_hint\n  else\n    csg = 'u'\n  #.........................................................................................................\n  @validate_is_csg csg\n  @validate_is_cid cid\n  return [ csg, cid, ]\n\n\n#===========================================================================================================\n# PATTERNS\n#-----------------------------------------------------------------------------------------------------------\n# G: grouped\n# O: optional\nname                      = ( /// (?:     [a-z][a-z0-9]*     ) /// ).source\n# nameG                     = ( /// (   (?: [a-z][a-z0-9]* ) | ) /// ).source\nnameO                     = ( /// (?: (?: [a-z][a-z0-9]* ) | ) /// ).source\nnameOG                    = ( /// (   (?: [a-z][a-z0-9]* ) | ) /// ).source\nhex                       = ( /// (?: x   [a-fA-F0-9]+       ) /// ).source\nhexG                      = ( /// (?: x  ([a-fA-F0-9]+)      ) /// ).source\ndec                       = ( /// (?:     [      0-9]+       ) /// ).source\ndecG                      = ( /// (?:    ([      0-9]+)      ) /// ).source\n#...........................................................................................................\n@_csg_matcher             = /// ^ #{name} $ ///\n@_ncr_matcher             = /// (?: &           \\# (?: #{hex}  | #{dec}  ) ; ) ///\n@_xncr_matcher            = /// (?: & #{nameO}  \\# (?: #{hex}  | #{dec}  ) ; ) ///\n@_ncr_csg_cid_matcher     = /// (?: & ()        \\# (?: #{hexG} | #{decG} ) ; ) ///\n@_xncr_csg_cid_matcher    = /// (?: & #{nameOG} \\# (?: #{hexG} | #{decG} ) ; ) ///\n#...........................................................................................................\n### Matchers for surrogate sequences and non-surrogate, 'ordinary' characters: ###\n@_surrogate_matcher       = /// (?: [  \\ud800-\\udbff ] [ \\udc00-\\udfff ] ) ///\n@_nonsurrogate_matcher    = ///     [^ \\ud800-\\udbff     \\udc00-\\udfff ]   ///\n#...........................................................................................................\n### Matchers for the first character of a string, in three modes (`plain`, `ncr`, `xncr`): ###\n@_first_chr_matcher_plain = /// ^ (?: #{@_surrogate_matcher.source}     |\n                                      #{@_nonsurrogate_matcher.source}    ) ///\n@_first_chr_matcher_ncr   = /// ^ (?: #{@_surrogate_matcher.source}     |\n                                      #{@_ncr_csg_cid_matcher.source}   |\n                                      #{@_nonsurrogate_matcher.source}    ) ///\n@_first_chr_matcher_xncr  = /// ^ (?: #{@_surrogate_matcher.source}     |\n                                      #{@_xncr_csg_cid_matcher.source}  |\n                                      #{@_nonsurrogate_matcher.source}    ) ///\n#...........................................................................................................\n@_plain_splitter          = /// ( #{@_surrogate_matcher.source}     |\n                                  #{@_nonsurrogate_matcher.source}    ) ///\n@_ncr_splitter            = /// ( #{@_ncr_matcher.source}           |\n                                  #{@_surrogate_matcher.source}     |\n                                  #{@_nonsurrogate_matcher.source}    ) ///\n@_xncr_splitter           = /// ( #{@_xncr_matcher.source}          |\n                                  #{@_surrogate_matcher.source}     |\n                                  #{@_nonsurrogate_matcher.source}    ) ///\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@cid_range_from_rsg = ( rsg ) ->\n  # [ csg, ... ] = rsg.split '-'\n  unless ( R = @_ranges_by_rsg[ rsg ] )?\n    throw new Error \"unknown RSG: #{rpr rsg}\"\n  return R\n\n\n#===========================================================================================================\n# VALIDATION\n#-----------------------------------------------------------------------------------------------------------\n@validate_is_csg = ( x ) ->\n  CND.validate_isa_text x\n  throw new Error \"not a valid CSG: #{rpr x}\" unless ( x.match @_csg_matcher )?\n  throw new Error \"unknown CSG: #{rpr x}\"     unless @_names_and_ranges_by_csg[ x ]?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@validate_is_cid = ( x ) ->\n  CND.validate_isa_number x\n  # if x < 0 or x > 0x10ffff or ( parseInt x ) != x\n  if x < 0 or x > 0xffffffff or ( parseInt x ) != x\n    throw new Error \"expected an integer between 0x0 and 0x10ffff, got 0x#{x.toString 16}\"\n  return null\n\n\n\n\n\n\n# console.log name for name of @\n# console.log String.fromCharCode 0x61\n# console.log String.fromCharCode 0x24563\n\n\n\n"]}